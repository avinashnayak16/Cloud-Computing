// ============================================
// 1. AUTHENTICATION SERVICE (Port: 3001)
// ============================================

// auth-service/package.json
{
  "name": "auth-service",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "bcrypt": "^5.1.0",
    "jsonwebtoken": "^9.0.0",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3"
  }
}

// auth-service/server.js
const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

app.use(cors());
app.use(express.json());

// Mock user database
const users = [
  { id: 1, username: 'admin', password: '$2b$10$8K1p/a0dRaYqfg5gvGJqyOWIQcbZY9v5/XxGFQnGrU6Lf3fRhAa6C', role: 'admin' }, // password: admin123
  { id: 2, username: 'user', password: '$2b$10$8K1p/a0dRaYqfg5gvGJqyOWIQcbZY9v5/XxGFQnGrU6Lf3fRhAa6C', role: 'user' }    // password: admin123
];

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    service: 'auth-service', 
    status: 'healthy', 
    timestamp: new Date().toISOString() 
  });
});

// Login endpoint
app.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    
    // Find user
    const user = users.find(u => u.username === username);
    if (!user) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    // Verify password
    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    // Generate JWT token
    const token = jwt.sign(
      { userId: user.id, username: user.username, role: user.role },
      JWT_SECRET,
      { expiresIn: '24h' }
    );
    
    res.json({
      message: 'Login successful',
      token,
      user: { id: user.id, username: user.username, role: user.role }
    });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Token validation endpoint
app.post('/validate', (req, res) => {
  try {
    const { token } = req.body;
    const decoded = jwt.verify(token, JWT_SECRET);
    res.json({ valid: true, user: decoded });
  } catch (error) {
    res.status(401).json({ valid: false, error: 'Invalid token' });
  }
});

app.listen(PORT, () => {
  console.log(`🔐 Auth Service running on port ${PORT}`);
});

// auth-service/.env
PORT=3001
JWT_SECRET=your-super-secret-jwt-key-here

// ============================================
// 2. USER MANAGEMENT SERVICE (Port: 3002)
// ============================================

// user-service/package.json
{
  "name": "user-service",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "axios": "^1.4.0",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3"
  }
}

// user-service/server.js
const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3002;
const AUTH_SERVICE_URL = process.env.AUTH_SERVICE_URL || 'http://localhost:3001';

app.use(cors());
app.use(express.json());

// Mock user database
let users = [
  { id: 1, username: 'admin', email: 'admin@example.com', role: 'admin', createdAt: '2024-01-01' },
  { id: 2, username: 'john_doe', email: 'john@example.com', role: 'user', createdAt: '2024-01-02' },
  { id: 3, username: 'jane_smith', email: 'jane@example.com', role: 'user', createdAt: '2024-01-03' }
];

// Middleware to verify JWT token
const verifyToken = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      return res.status(401).json({ error: 'No token provided' });
    }
    
    // Call auth service to validate token
    const response = await axios.post(`${AUTH_SERVICE_URL}/validate`, { token });
    req.user = response.data.user;
    next();
  } catch (error) {
    res.status(401).json({ error: 'Invalid token' });
  }
};

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    service: 'user-service', 
    status: 'healthy', 
    timestamp: new Date().toISOString() 
  });
});

// Get all users
app.get('/users', verifyToken, (req, res) => {
  res.json({
    users: users.map(user => ({
      id: user.id,
      username: user.username,
      email: user.email,
      role: user.role,
      createdAt: user.createdAt
    })),
    total: users.length
  });
});

// Get user by ID
app.get('/users/:id', verifyToken, (req, res) => {
  const userId = parseInt(req.params.id);
  const user = users.find(u => u.id === userId);
  
  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }
  
  res.json({ user });
});

// Create new user
app.post('/users', verifyToken, (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ error: 'Admin access required' });
  }
  
  const { username, email, role } = req.body;
  const newUser = {
    id: users.length + 1,
    username,
    email,
    role: role || 'user',
    createdAt: new Date().toISOString().split('T')[0]
  };
  
  users.push(newUser);
  res.status(201).json({ message: 'User created successfully', user: newUser });
});

// Update user
app.put('/users/:id', verifyToken, (req, res) => {
  const userId = parseInt(req.params.id);
  const userIndex = users.findIndex(u => u.id === userId);
  
  if (userIndex === -1) {
    return res.status(404).json({ error: 'User not found' });
  }
  
  // Only admin can update other users, users can update themselves
  if (req.user.role !== 'admin' && req.user.userId !== userId) {
    return res.status(403).json({ error: 'Insufficient permissions' });
  }
  
  const { username, email, role } = req.body;
  users[userIndex] = { ...users[userIndex], username, email, role };
  
  res.json({ message: 'User updated successfully', user: users[userIndex] });
});

// Delete user
app.delete('/users/:id', verifyToken, (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ error: 'Admin access required' });
  }
  
  const userId = parseInt(req.params.id);
  const userIndex = users.findIndex(u => u.id === userId);
  
  if (userIndex === -1) {
    return res.status(404).json({ error: 'User not found' });
  }
  
  users.splice(userIndex, 1);
  res.json({ message: 'User deleted successfully' });
});

app.listen(PORT, () => {
  console.log(`👥 User Service running on port ${PORT}`);
});

// user-service/.env
PORT=3002
AUTH_SERVICE_URL=http://localhost:3001

// ============================================
// 3. API GATEWAY SERVICE (Port: 3000)
// ============================================

// api-gateway/package.json
{
  "name": "api-gateway",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "http-proxy-middleware": "^2.0.6",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express-rate-limit": "^6.7.0"
  }
}

// api-gateway/server.js
const express = require('express');
const { createProxyMiddleware } = require('http-proxy-middleware');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});

app.use(cors());
app.use(express.json());
app.use(limiter);

// Service URLs
const services = {
  auth: process.env.AUTH_SERVICE_URL || 'http://localhost:3001',
  user: process.env.USER_SERVICE_URL || 'http://localhost:3002'
};

// Logging middleware
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path} - ${req.ip}`);
  next();
});

// Health check for gateway
app.get('/health', (req, res) => {
  res.json({ 
    service: 'api-gateway', 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    services: services
  });
});

// Combined health check for all services
app.get('/health/all', async (req, res) => {
  const axios = require('axios');
  const healthChecks = {};
  
  for (const [name, url] of Object.entries(services)) {
    try {
      const response = await axios.get(`${url}/health`, { timeout: 5000 });
      healthChecks[name] = { status: 'healthy', ...response.data };
    } catch (error) {
      healthChecks[name] = { status: 'unhealthy', error: error.message };
    }
  }
  
  res.json({
    gateway: { status: 'healthy', timestamp: new Date().toISOString() },
    services: healthChecks
  });
});

// Proxy configuration for Auth Service
app.use('/api/auth', createProxyMiddleware({
  target: services.auth,
  changeOrigin: true,
  pathRewrite: {
    '^/api/auth': '', // remove /api/auth from the path
  },
  onError: (err, req, res) => {
    console.error('Auth Service Proxy Error:', err.message);
    res.status(503).json({ error: 'Auth service unavailable' });
  }
}));

// Proxy configuration for User Service
app.use('/api/users', createProxyMiddleware({
  target: services.user,
  changeOrigin: true,
  pathRewrite: {
    '^/api/users': '/users', // rewrite path
  },
  onError: (err, req, res) => {
    console.error('User Service Proxy Error:', err.message);
    res.status(503).json({ error: 'User service unavailable' });
  }
}));

// Catch-all for undefined routes
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Gateway Error:', err);
  res.status(500).json({ error: 'Internal gateway error' });
});

app.listen(PORT, () => {
  console.log(`🌐 API Gateway running on port ${PORT}`);
  console.log('Available routes:');
  console.log('- POST /api/auth/login');
  console.log('- POST /api/auth/validate');
  console.log('- GET /api/users');
  console.log('- GET /health');
  console.log('- GET /health/all');
});

// api-gateway/.env
PORT=3000
AUTH_SERVICE_URL=http://localhost:3001
USER_SERVICE_URL=http://localhost:3002

// ============================================
// DOCKER CONFIGURATION (Optional)
// ============================================

// docker-compose.yml
version: '3.8'
services:
  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
    depends_on:
      - auth-service
      - user-service

  auth-service:
    build: ./auth-service
    ports:
      - "3001:3001"
    environment:
      - JWT_SECRET=your-super-secret-jwt-key-here

  user-service:
    build: ./user-service
    ports:
      - "3002:3002"
    environment:
      - AUTH_SERVICE_URL=http://auth-service:3001

// Dockerfile (same for all services)
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]

// ============================================
// HOW TO RUN THE SERVICES
// ============================================

/*
1. Create three separate folders:
   - auth-service/
   - user-service/
   - api-gateway/

2. In each folder, create the respective files above

3. Install dependencies in each folder:
   npm install

4. Start services in order:
   Terminal 1: cd auth-service && npm start
   Terminal 2: cd user-service && npm start
   Terminal 3: cd api-gateway && npm start

5. Test the microservices:
   
   // Login
   curl -X POST http://localhost:3000/api/auth/login \
     -H "Content-Type: application/json" \
     -d '{"username": "admin", "password": "admin123"}'
   
   // Get users (use token from login response)
   curl -X GET http://localhost:3000/api/users \
     -H "Authorization: Bearer YOUR_JWT_TOKEN"
   
   // Health check
   curl http://localhost:3000/health/all

6. Or use Docker:
   docker-compose up
*/